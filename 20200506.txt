4 Working With Lists

Looping through an Entire List

For - the same action with every item in a list
ex)
magicians = [‘alice’, ‘david’, ‘carolina’]
for magician in magicians:
	print(magician)

	A Closer Look at Looping


	Doing More Work Within a for loop

for magician in magicians:
	print(f”{magician.title()}, that was a great trick!”)


	Doing Something after a for loop 
magicians = [‘alice’, ‘david’, ‘carolina’]
for magician in magicians:
	print(f”{magicians.title()}, that was a great trick!”)
	print(f”I can’t wait to see your next trick, [magician.title()}.\n”)
print(“Thank you, everyone. That was a great magic show!”)

	Avoiding Indentation Errors

Forgetting to Indent
Forgetting to Indent Additional Lines
magicians = [‘alice’, ‘david’, ‘carolina’]
for magician in magicians:
	print(f”{magicians.title()}, that was a great trick!”)
print(f”I can’t wait to see your next trick, {magician.title()}.\n”)

Carolina, that was a great trick!
I can’t wait to see your next trick, Carolina.

Only Carolina gets the last print because it was the last value associated with magician

Indenting Unnecessarily
	print(message)

Indenting Unnecessarily After the Loop
magicians = [‘alice’, ‘david’, ‘carolina’]
for magician in magicians:
	print(f”{magician.title()}, that was a great trick!”)
	print(f”I can’t wait to see your next trick, [magician.title()}. \n”)

	print(“Everyone, that was great magic show!”)

Forgetting the Colon

	Making Numerical Lists

Using the range() function
 for value in range(1, 5):
	print(value)
1
2
3
4
if one argument start from 0
range(6) : 0~5

Using range() to make a list of numbers
numbers = list(range(1, 6))
print(numbers)
[1, 2, 3, 4, 5]

even_numbers = list(range(2, 11, 2))
print(even_numbers)
[2, 4, 6, 8, 10]

squares = []
for value in range(1, 11):
	square = value ** 2
	squares.append(square)

print(squares)

==========================
even_numbers = list(range(2, 11, 2))
print(even_numbers)

squares = []
for value in range(1, 11):
	squares.append(value**2)
print(squares)

Simple Statistics with a List of Numbers
digits = [1, 2, 3, 4, ,5 ,6]
min(digits)
0
max(digits)
6
sum(digits)
45

List Comprehensions

a list comprehension - allows you to generate this same list in just one line of code
combines the for loop and the creation of new elements into one line,and automatically appends each new element

squares = [value**2 for value in range(1, 11)]
print(squares)

Working with Part of a List
1. Slicing a List 
slice - a specific group of items in a list
players = ['charles', 'martina', 'michael', 'florence']
print(players[1:4])
print(players[:4])
for players in players[:3]:
  print(player.title())

2. Looping through a slice
players = [Here are the first three players on my team:"]
for player in players[:3]:
  print(player.title())

3. Copying a List [:]
my_foods = ['pizza, 'falafel', 'carrot cake']
friend_foods = my_foods[:]

Tuples
meaning immutable list

1. Defining a Tuple
uses paranthese
when only one object in Tuple - my_t = (3,)
need a comma after the first object

2. Writing over a Tuple
can overwrite an existing tuple

Style Your code

